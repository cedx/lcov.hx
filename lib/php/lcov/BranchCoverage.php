<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace lcov;

use \php\Boot;

/**
 * Provides the coverage data of branches.
 */
class BranchCoverage {
	/**
	 * @var \Array_hx
	 * The coverage data.
	 */
	public $data;
	/**
	 * @var int
	 * The number of branches found.
	 */
	public $found;
	/**
	 * @var int
	 * The number of branches hit.
	 */
	public $hit;

	/**
	 * Creates a new branch coverage.
	 * 
	 * @param int $found
	 * @param int $hit
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function __construct ($found = 0, $hit = 0, $data = null) {
		if ($found === null) {
			$found = 0;
		}
		if ($hit === null) {
			$hit = 0;
		}
		$this->data = ($data !== null ? \Array_hx::wrap($data) : new \Array_hx());
		$this->found = $found;
		$this->hit = $hit;
	}

	/**
	 * Returns a string representation of this object.
	 * 
	 * @return string
	 */
	public function toString () {
		$_this = $this->data;
		$result = [];
		$data = $_this->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		while ($_g_current < $_g_length) {
			$result[] = $data[$_g_current++]->toString();
		}
		$lines = \Array_hx::wrap($result);
		$lines->arr[$lines->length++] = "BRF" . ":" . ($this->found??'null');
		$lines->arr[$lines->length++] = "BRH" . ":" . ($this->hit??'null');
		return $lines->join("\x0A");
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(BranchCoverage::class, 'lcov.BranchCoverage');
