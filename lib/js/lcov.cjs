// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
$hx_exports["lcov"] = $hx_exports["lcov"] || {};
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	split(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
}
EReg.__name__ = true;
Object.assign(EReg.prototype, {
	__class__: EReg
});
class HxOverrides {
	static cca(s,index) {
		var x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
}
HxOverrides.__name__ = true;
Math.__name__ = true;
class Reflect {
	static isObject(v) {
		if(v == null) {
			return false;
		}
		var t = typeof(v);
		if(!(t == "string" || t == "object" && v.__enum__ == null)) {
			if(t == "function") {
				return (v.__name__ || v.__ename__) != null;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
}
Reflect.__name__ = true;
class Std {
	static parseInt(x) {
		if(x != null) {
			var _g = 0;
			var _g1 = x.length;
			while(_g < _g1) {
				var i = _g++;
				var c = x.charCodeAt(i);
				if(c <= 8 || c >= 14 && c != 32 && c != 45) {
					var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
					if(isNaN(v)) {
						return null;
					} else {
						return v;
					}
				}
			}
		}
		return null;
	}
}
Std.__name__ = true;
class StringTools {
	static isSpace(s,pos) {
		var c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
}
StringTools.__name__ = true;
class js__$Boot_HaxeError extends Error {
	constructor(val) {
		super();
		this.val = val;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,js__$Boot_HaxeError);
		}
	}
}
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
Object.assign(js__$Boot_HaxeError.prototype, {
	__class__: js__$Boot_HaxeError
});
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			var cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			var name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
			var intf = cc.__interfaces__;
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = _g++;
				var i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __nativeClassName(o) {
		var name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = true;
class lcov_BranchCoverage {
	constructor(found,hit,data) {
		if(hit == null) {
			hit = 0;
		}
		if(found == null) {
			found = 0;
		}
		this.data = data != null ? data : [];
		this.found = found;
		this.hit = hit;
	}
	toJson() {
		var _this = this.data;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toJson();
		}
		return { data : result, found : this.found, hit : this.hit};
	}
	toString() {
		var _this = this.data;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toString();
		}
		var lines = result;
		lines.push("" + "BRF" + ":" + this.found);
		lines.push("" + "BRH" + ":" + this.hit);
		return lines.join("\n");
	}
	toJSON() {
		return this.toJson();
	}
	static fromJson(map) {
		var tmp = js_Boot.__instanceof(map["found"],Int) ? map["found"] : 0;
		var tmp1 = js_Boot.__instanceof(map["hit"],Int) ? map["hit"] : 0;
		var tmp2;
		if(((map["data"]) instanceof Array)) {
			var _this = map["data"];
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = lcov_BranchData.fromJson(_this[i]);
			}
			tmp2 = result;
		} else {
			tmp2 = [];
		}
		return new lcov_BranchCoverage(tmp,tmp1,tmp2);
	}
}
$hx_exports["lcov"]["BranchCoverage"] = lcov_BranchCoverage;
lcov_BranchCoverage.__name__ = true;
Object.assign(lcov_BranchCoverage.prototype, {
	__class__: lcov_BranchCoverage
});
class lcov_BranchData {
	constructor(lineNumber,blockNumber,branchNumber,taken) {
		if(taken == null) {
			taken = 0;
		}
		this.blockNumber = blockNumber;
		this.branchNumber = branchNumber;
		this.lineNumber = lineNumber;
		this.taken = taken;
	}
	toJson() {
		return { blockNumber : this.blockNumber, branchNumber : this.branchNumber, lineNumber : this.lineNumber, taken : this.taken};
	}
	toString() {
		var value = "" + "BRDA" + ":" + this.lineNumber + "," + this.blockNumber + "," + this.branchNumber;
		if(this.taken > 0) {
			return "" + value + "," + this.taken;
		} else {
			return "" + value + ",-";
		}
	}
	toJSON() {
		return this.toJson();
	}
	static fromJson(map) {
		return new lcov_BranchData(js_Boot.__instanceof(map["lineNumber"],Int) ? map["lineNumber"] : 0,js_Boot.__instanceof(map["blockNumber"],Int) ? map["blockNumber"] : 0,js_Boot.__instanceof(map["branchNumber"],Int) ? map["branchNumber"] : 0,js_Boot.__instanceof(map["taken"],Int) ? map["taken"] : 0);
	}
}
$hx_exports["lcov"]["BranchData"] = lcov_BranchData;
lcov_BranchData.__name__ = true;
Object.assign(lcov_BranchData.prototype, {
	__class__: lcov_BranchData
});
class lcov_FunctionCoverage {
	constructor(found,hit,data) {
		if(hit == null) {
			hit = 0;
		}
		if(found == null) {
			found = 0;
		}
		this.data = data != null ? data : [];
		this.found = found;
		this.hit = hit;
	}
	toJson() {
		var _this = this.data;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toJson();
		}
		return { data : result, found : this.found, hit : this.hit};
	}
	toString() {
		var _this = this.data;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toString(true);
		}
		var lines = result;
		var _g2 = 0;
		var _this1 = this.data;
		var result1 = new Array(_this1.length);
		var _g3 = 0;
		var _g11 = _this1.length;
		while(_g3 < _g11) {
			var i1 = _g3++;
			result1[i1] = _this1[i1].toString(false);
		}
		var _g12 = result1;
		while(_g2 < _g12.length) {
			var line = _g12[_g2];
			++_g2;
			lines.push(line);
		}
		lines.push("" + "FNF" + ":" + this.found);
		lines.push("" + "FNH" + ":" + this.hit);
		return lines.join("\n");
	}
	toJSON() {
		return this.toJson();
	}
	static fromJson(map) {
		var tmp = js_Boot.__instanceof(map["found"],Int) ? map["found"] : 0;
		var tmp1 = js_Boot.__instanceof(map["hit"],Int) ? map["hit"] : 0;
		var tmp2;
		if(((map["data"]) instanceof Array)) {
			var _this = map["data"];
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = lcov_FunctionData.fromJson(_this[i]);
			}
			tmp2 = result;
		} else {
			tmp2 = [];
		}
		return new lcov_FunctionCoverage(tmp,tmp1,tmp2);
	}
}
$hx_exports["lcov"]["FunctionCoverage"] = lcov_FunctionCoverage;
lcov_FunctionCoverage.__name__ = true;
Object.assign(lcov_FunctionCoverage.prototype, {
	__class__: lcov_FunctionCoverage
});
class lcov_FunctionData {
	constructor(functionName,lineNumber,executionCount) {
		if(executionCount == null) {
			executionCount = 0;
		}
		this.executionCount = executionCount;
		this.functionName = functionName;
		this.lineNumber = lineNumber;
	}
	toJson() {
		return { executionCount : this.executionCount, functionName : this.functionName, lineNumber : this.lineNumber};
	}
	toString(asDefinition) {
		if(asDefinition == null) {
			asDefinition = false;
		}
		var token = asDefinition ? "FN" : "FNDA";
		var count = asDefinition ? this.lineNumber : this.executionCount;
		return "" + token + ":" + count + "," + this.functionName;
	}
	toJSON() {
		return this.toJson();
	}
	static fromJson(map) {
		return new lcov_FunctionData(typeof(map["functionName"]) == "string" ? map["functionName"] : "",js_Boot.__instanceof(map["lineNumber"],Int) ? map["lineNumber"] : 0,js_Boot.__instanceof(map["executionCount"],Int) ? map["executionCount"] : 0);
	}
}
$hx_exports["lcov"]["FunctionData"] = lcov_FunctionData;
lcov_FunctionData.__name__ = true;
Object.assign(lcov_FunctionData.prototype, {
	__class__: lcov_FunctionData
});
class lcov_LcovException extends SyntaxError {
	constructor(message,source,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(source == null) {
			source = "";
		}
		if(message == null) {
			message = "";
		}
		super(message);
		this.name = "LcovException";
		this.offset = offset;
		this.source = source;
	}
}
$hx_exports["lcov"]["LcovException"] = lcov_LcovException;
lcov_LcovException.__name__ = true;
lcov_LcovException.__super__ = SyntaxError;
Object.assign(lcov_LcovException.prototype, {
	__class__: lcov_LcovException
});
class lcov_LineCoverage {
	constructor(found,hit,data) {
		if(hit == null) {
			hit = 0;
		}
		if(found == null) {
			found = 0;
		}
		this.data = data != null ? data : [];
		this.found = found;
		this.hit = hit;
	}
	toJson() {
		var _this = this.data;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toJson();
		}
		return { data : result, found : this.found, hit : this.hit};
	}
	toString() {
		var _this = this.data;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toString();
		}
		var lines = result;
		lines.push("" + "LF" + ":" + this.found);
		lines.push("" + "LH" + ":" + this.hit);
		return lines.join("\n");
	}
	toJSON() {
		return this.toJson();
	}
	static fromJson(map) {
		var tmp = js_Boot.__instanceof(map["found"],Int) ? map["found"] : 0;
		var tmp1 = js_Boot.__instanceof(map["hit"],Int) ? map["hit"] : 0;
		var tmp2;
		if(((map["data"]) instanceof Array)) {
			var _this = map["data"];
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = lcov_LineData.fromJson(_this[i]);
			}
			tmp2 = result;
		} else {
			tmp2 = [];
		}
		return new lcov_LineCoverage(tmp,tmp1,tmp2);
	}
}
$hx_exports["lcov"]["LineCoverage"] = lcov_LineCoverage;
lcov_LineCoverage.__name__ = true;
Object.assign(lcov_LineCoverage.prototype, {
	__class__: lcov_LineCoverage
});
class lcov_LineData {
	constructor(lineNumber,executionCount,checksum) {
		if(checksum == null) {
			checksum = "";
		}
		if(executionCount == null) {
			executionCount = 0;
		}
		this.checksum = checksum;
		this.executionCount = executionCount;
		this.lineNumber = lineNumber;
	}
	toJson() {
		return { checksum : this.checksum, executionCount : this.executionCount, lineNumber : this.lineNumber};
	}
	toString() {
		var value = "" + "DA" + ":" + this.lineNumber + "," + this.executionCount;
		if(this.checksum.length > 0) {
			return "" + value + "," + this.checksum;
		} else {
			return value;
		}
	}
	toJSON() {
		return this.toJson();
	}
	static fromJson(map) {
		return new lcov_LineData(js_Boot.__instanceof(map["lineNumber"],Int) ? map["lineNumber"] : 0,js_Boot.__instanceof(map["executionCount"],Int) ? map["executionCount"] : 0,typeof(map["checksum"]) == "string" ? map["checksum"] : "");
	}
}
$hx_exports["lcov"]["LineData"] = lcov_LineData;
lcov_LineData.__name__ = true;
Object.assign(lcov_LineData.prototype, {
	__class__: lcov_LineData
});
class lcov_Record {
	constructor(sourceFile,options) {
		this.branches = options != null && options.branches != null ? options.branches : null;
		this.functions = options != null && options.functions != null ? options.functions : null;
		this.lines = options != null && options.lines != null ? options.lines : null;
		this.sourceFile = sourceFile;
	}
	toJson() {
		return { branches : this.branches != null ? this.branches.toJson() : null, functions : this.functions != null ? this.functions.toJson() : null, lines : this.lines != null ? this.lines.toJson() : null, sourceFile : this.sourceFile};
	}
	toString() {
		var output = ["" + "SF" + ":" + this.sourceFile];
		if(this.functions != null) {
			output.push(this.functions.toString());
		}
		if(this.branches != null) {
			output.push(this.branches.toString());
		}
		if(this.lines != null) {
			output.push(this.lines.toString());
		}
		output.push("end_of_record");
		return output.join("\n");
	}
	toJSON() {
		return this.toJson();
	}
	static fromJson(map) {
		return new lcov_Record(typeof(map["sourceFile"]) == "string" ? map["sourceFile"] : "",{ branches : Reflect.isObject(map["branches"]) ? lcov_BranchCoverage.fromJson(map["branches"]) : null, functions : Reflect.isObject(map["functions"]) ? lcov_FunctionCoverage.fromJson(map["functions"]) : null, lines : Reflect.isObject(map["lines"]) ? lcov_LineCoverage.fromJson(map["lines"]) : null});
	}
}
$hx_exports["lcov"]["Record"] = lcov_Record;
lcov_Record.__name__ = true;
Object.assign(lcov_Record.prototype, {
	__class__: lcov_Record
});
class lcov_Report {
	constructor(testName,records) {
		if(testName == null) {
			testName = "";
		}
		this.records = records != null ? records : [];
		this.testName = testName;
	}
	toJson() {
		var _this = this.records;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toJson();
		}
		return { records : result, testName : this.testName};
	}
	toString() {
		var lines = this.testName.length > 0 ? ["" + "TN" + ":" + this.testName] : [];
		var _g = 0;
		var _this = this.records;
		var result = new Array(_this.length);
		var _g1 = 0;
		var _g11 = _this.length;
		while(_g1 < _g11) {
			var i = _g1++;
			result[i] = _this[i].toString();
		}
		var _g12 = result;
		while(_g < _g12.length) {
			var record = _g12[_g];
			++_g;
			lines.push(record);
		}
		return lines.join("\n");
	}
	toJSON() {
		return this.toJson();
	}
	static fromCoverage(coverage) {
		var report = new lcov_Report();
		try {
			var offset = 0;
			var record = null;
			var _g = 0;
			var _g1 = new EReg("\r?\n","g").split(coverage);
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				offset += line.length;
				line = StringTools.trim(line);
				if(line.length == 0) {
					continue;
				}
				var parts = line.split(":");
				if(parts.length < 2 && parts[0] != "end_of_record") {
					throw new lcov_LcovException("Invalid token format.",coverage,offset);
				}
				var token = parts.shift();
				var data = parts.join(":").split(",");
				switch(token) {
				case "BRDA":
					if(data.length < 4) {
						throw new lcov_LcovException("Invalid branch data.",coverage,offset);
					}
					record.branches.data.push(new lcov_BranchData(Std.parseInt(data[0]),Std.parseInt(data[1]),Std.parseInt(data[2]),data[3] == "-" ? 0 : Std.parseInt(data[3])));
					break;
				case "BRF":
					record.branches.found = Std.parseInt(data[0]);
					break;
				case "BRH":
					record.branches.hit = Std.parseInt(data[0]);
					break;
				case "DA":
					if(data.length < 2) {
						throw new lcov_LcovException("Invalid line data.",coverage,offset);
					}
					record.lines.data.push(new lcov_LineData(Std.parseInt(data[0]),Std.parseInt(data[1]),data.length >= 3 ? data[2] : ""));
					break;
				case "FN":
					if(data.length < 2) {
						throw new lcov_LcovException("Invalid function name.",coverage,offset);
					}
					record.functions.data.push(new lcov_FunctionData(data[1],Std.parseInt(data[0])));
					break;
				case "FNDA":
					if(data.length < 2) {
						throw new lcov_LcovException("Invalid function data.",coverage,offset);
					}
					var _g2 = 0;
					var _g11 = record.functions.data;
					while(_g2 < _g11.length) {
						var item = _g11[_g2];
						++_g2;
						if(item.functionName == data[1]) {
							item.executionCount = Std.parseInt(data[0]);
							break;
						}
					}
					break;
				case "FNF":
					record.functions.found = Std.parseInt(data[0]);
					break;
				case "FNH":
					record.functions.hit = Std.parseInt(data[0]);
					break;
				case "LF":
					record.lines.found = Std.parseInt(data[0]);
					break;
				case "LH":
					record.lines.hit = Std.parseInt(data[0]);
					break;
				case "SF":
					record = new lcov_Record(data[0],{ branches : new lcov_BranchCoverage(), functions : new lcov_FunctionCoverage(), lines : new lcov_LineCoverage()});
					break;
				case "TN":
					report.testName = data[0];
					break;
				case "end_of_record":
					report.records.push(record);
					break;
				}
			}
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof lcov_LcovException)) {
				throw e1;
			} else {
				var e2 = e1;
				throw new lcov_LcovException("The coverage data has an invalid LCOV format.",coverage);
			}
		}
		if(report.records.length == 0) {
			throw new lcov_LcovException("The coverage data is empty.",coverage);
		}
		return report;
	}
	static fromJson(map) {
		var tmp = typeof(map["testName"]) == "string" ? map["testName"] : "";
		var tmp1;
		if(((map["records"]) instanceof Array)) {
			var _this = map["records"];
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = lcov_Record.fromJson(_this[i]);
			}
			tmp1 = result;
		} else {
			tmp1 = [];
		}
		return new lcov_Report(tmp,tmp1);
	}
}
$hx_exports["lcov"]["Report"] = lcov_Report;
lcov_Report.__name__ = true;
Object.assign(lcov_Report.prototype, {
	__class__: lcov_Report
});
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
